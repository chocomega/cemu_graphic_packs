#version 400
#extension GL_ARB_texture_gather : enable
// shader b6bcc9c0d0038896
// usesIntegerValues: false
// special state 0 0 0 0 0 0 0 0 0 
// Color buffers:
uniform ivec4 uf_remappedPS[3];
uniform sampler2D textureUnitPS1;// Tex1 addr 0x33933000 res 64x64x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 2 border: 0
uniform sampler2D textureUnitPS2;// Tex2 addr 0x33936000 res 64x64x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 5 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
uniform sampler2D textureUnitPS3;// Tex3 addr 0x33935000 res 64x64x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
uniform sampler2D textureUnitPS4;// Tex4 addr 0x33934000 res 64x64x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 2 border: 0
in vec4 passParameter0;
in vec4 passParameter1;
in vec4 passParameter2;
in vec4 passParameter3;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 5) out vec4 passPixelColor5;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameter0;
R1f = passParameter1;
R2f = passParameter2;
R3f = passParameter3;
R3f.xy = (texture(textureUnitPS3, R0f.xy).xy); // TEX_INST_SAMPLE OffsetXYZ 00 00 00
R4f.xyz = (texture(textureUnitPS4, R0f.xy).xyz); // TEX_INST_SAMPLE OffsetXYZ 00 00 00
R0f.w = (texture(textureUnitPS2, R0f.xy).x); // TEX_INST_SAMPLE OffsetXYZ 00 00 00
R5f.xyz = (texture(textureUnitPS1, R0f.xy).xyz); // TEX_INST_SAMPLE OffsetXYZ 00 00 00

discard;

// 0
R127f.x = (R3f.x * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PV0f.x = R127f.x;
PV0f.y = mul_nonIEEE(R1f.x, R2f.y);
PV0f.z = mul_nonIEEE(R1f.z, R2f.x);
PV0f.w = mul_nonIEEE(R1f.y, R2f.z);
R127f.w = (R3f.y * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PS0f = R127f.w;
// 1
R123f.x = (-(R2f.y) * R1f.z + PV0f.w);
PV1f.x = R123f.x;
R123f.y = (-(R2f.x) * R1f.y + PV0f.y);
PV1f.y = R123f.y;
PV1f.z = mul_nonIEEE(PV0f.x, PV0f.x);
R123f.w = (-(R2f.z) * R1f.x + PV0f.z);
PV1f.w = R123f.w;
PS1f = mul_nonIEEE(R2f.w, PS0f);
// 2
PV0f.x = mul_nonIEEE(PV1f.x, PS1f);
R123f.y = (R127f.w * R127f.w + PV1f.z);
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
PV0f.z = mul_nonIEEE(PV1f.w, PS1f);
PV0f.w = mul_nonIEEE(PV1f.y, PS1f);
R125f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), R4f.x);
PS0f = R125f.w;
// 3
PV1f.x = -(PV0f.y) + 1.0;
R127f.y = (R2f.y * R127f.x + PV0f.z);
PV1f.y = R127f.y;
R127f.z = (R2f.x * R127f.x + PV0f.x);
PV1f.z = R127f.z;
R127f.w = (R2f.z * R127f.x + PV0f.w);
PV1f.w = R127f.w;
R125f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), R4f.y);
PS1f = R125f.y;
// 4
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), R4f.z);
PV0f.x = R127f.x;
R126f.y = mul_nonIEEE(R0f.w, intBitsToFloat(0x427f0000));
PV0f.y = R126f.y;
R123f.z = (-(R3f.z) * intBitsToFloat(uf_remappedPS[1].x) + -(intBitsToFloat(uf_remappedPS[1].y)));
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV0f.z = R123f.z;
R126f.w = mul_nonIEEE(R125f.w, R125f.w);
PV0f.w = R126f.w;
PS0f = sqrt(PV1f.x);
// 5
backupReg0f = R1f.x;
backupReg1f = R127f.y;
R1f.x = (backupReg0f * PS0f + R127f.z);
PV1f.x = R1f.x;
R127f.y = (R1f.y * PS0f + backupReg1f);
PV1f.y = R127f.y;
R126f.z = (R1f.z * PS0f + R127f.w);
PV1f.z = R126f.z;
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w), PV0f.z);
PV1f.w = R127f.w;
PS1f = mul_nonIEEE(R125f.y, R125f.y);
// 6
backupReg0f = R126f.y;
backupReg1f = R126f.w;
R126f.x = mul_nonIEEE(PV1f.w, PS1f);
PV0f.x = R126f.x;
R126f.y = floor(backupReg0f);
R126f.y *= 4.0;
PV0f.y = R126f.y;
PV0f.z = mul_nonIEEE(R127f.x, R127f.x);
R126f.w = mul_nonIEEE(PV1f.w, backupReg1f);
PV0f.w = R126f.w;
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R125f.w);
PS0f = R127f.z;
// 7
R124f.x = R1f.x * R1f.x + R127f.y * R127f.y + R126f.z * R126f.z + intBitsToFloat(0x80000000) * 0.0;
PV1f.x = R124f.x;
PV1f.y = R124f.x;
PV1f.z = R124f.x;
PV1f.w = R124f.x;
R125f.x = mul_nonIEEE(R127f.w, PV0f.z);
PS1f = R125f.x;
// 8
backupReg0f = R127f.x;
R127f.x = R126f.y + intBitsToFloat(0x40000000);
PV0f.x = R127f.x;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), backupReg0f);
R4f.z = 1.0;
PV0f.z = R4f.z;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R125f.y);
R0f.x = (intBitsToFloat(uf_remappedPS[1].z) * R126f.w + R127f.z);
PS0f = R0f.x;
// 9
R4f.x = intBitsToFloat(0x3d30b0b1);
PV1f.x = R4f.x;
R0f.y = (intBitsToFloat(uf_remappedPS[1].z) * R126f.x + PV0f.w);
PV1f.y = R0f.y;
R0f.z = (intBitsToFloat(uf_remappedPS[1].z) * R125f.x + PV0f.y);
PV1f.z = R0f.z;
R4f.w = intBitsToFloat(uf_remappedPS[2].z);
PV1f.w = R4f.w;
R0f.w = intBitsToFloat(0x3f800000);
PS1f = R0f.w;
// 10
R3f.w = mul_nonIEEE(R127f.x, intBitsToFloat(0x3b808081));
PV0f.w = R3f.w;
R5f.w = intBitsToFloat(0x3ea2a2a3);
PS0f = R5f.w;
// 11
tempResultf = 1.0 / sqrt(R124f.x);
PS1f = tempResultf;
PS1f /= 2.0;
// 12
R3f.x = (R1f.x * PS1f + 0.5);
PV0f.x = R3f.x;
R3f.y = (R127f.y * PS1f + 0.5);
PV0f.y = R3f.y;
R3f.z = (R126f.z * PS1f + 0.5);
PV0f.z = R3f.z;
// 13
R9f.x = R0f.x;
PV1f.x = R9f.x;
R9f.y = R0f.y;
PV1f.y = R9f.y;
R9f.z = R0f.z;
PV1f.z = R9f.z;
R9f.w = R0f.w;
PV1f.w = R9f.w;
// 14
R8f.x = R3f.x;
PV0f.x = R8f.x;
R8f.y = R3f.y;
PV0f.y = R8f.y;
R8f.z = R3f.z;
PV0f.z = R8f.z;
R8f.w = R3f.w;
PV0f.w = R8f.w;
// 15
R7f.x = R5f.x;
PV1f.x = R7f.x;
R7f.y = R5f.y;
PV1f.y = R7f.y;
R7f.z = R5f.z;
PV1f.z = R7f.z;
R7f.w = R5f.w;
PV1f.w = R7f.w;
// 16
R6f.x = R4f.x;
PV0f.x = R6f.x;
R6f.y = R4f.w;
PV0f.y = R6f.y;
R6f.z = R4f.z;
PV0f.z = R6f.z;
R6f.w = R4f.z;
PV0f.w = R6f.w;
// export
passPixelColor0 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
passPixelColor1 = vec4(R7f.x, R7f.y, R7f.z, R7f.w);
passPixelColor3 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
passPixelColor5 = vec4(R9f.x, R9f.y, R9f.z, R9f.w);
}
